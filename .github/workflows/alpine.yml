name: Alpine Build

on: [push]

jobs:
  container:
    runs-on: ubuntu-latest
    container:
      image: clfoundation/sbcl:alpine3.14
    steps:
      - uses: actions/checkout@v2

      - name: APK build deps
        run: |
          apk add --no-cache ca-certificates curl openssl make gcc musl-dev linux-headers gnupg patch zlib-dev zlib-static git tar bash xz openssh-client-common zstd musl-dbg

      # CACHE
      - run: mkdir -pv ~/build
      - name: Get Current Month
        id: current-month
        run: echo "::set-output name=value::$(date -u '+%Y-%m')"
      - name: Cache SBCL 2.1.9 Setup
        id: cache
        uses: actions/cache@v2
        env:
          cache-name: cache-alpine-sbcl-2.1.9
        with:
          path: |
            ~/build
            ~/quicklisp
            ~/.cache/common-lisp
          key: "${{ steps.current-month.outputs.value }}-${{ env.cache-name }}-${{ runner.os }}"
      - name: Restore Path To Cached Files
        run: |
          echo $HOME/build/binary >> $GITHUB_PATH
        if: steps.cache.outputs.cache-hit == 'true'

      # BUILD
      - name: Build SBCL 2.1.9
        run: |
          cd ~/build/
          wget http://downloads.sourceforge.net/project/sbcl/sbcl/2.1.9/sbcl-2.1.9-source.tar.bz2
          tar xjf sbcl-2.1.9-source.tar.bz2
          cd sbcl-2.1.9
          sh make.sh --with-sb-core-compression --fancy
          INSTALL_ROOT=~/build/binary sh install.sh
        if: steps.cache.outputs.cache-hit != 'true'

      - name: First time Install quicklisp
        run: |
          cd ~/build
          wget https://beta.quicklisp.org/quicklisp.lisp
          export PATH="$HOME/build/binary/bin:${PATH}"
          sbcl --non-interactive \
               --eval '(load "quicklisp.lisp")' \
               --eval '(quicklisp-quickstart:install)' \
               --eval '(ql-util:without-prompting (ql:add-to-init-file))' \
               --eval '(ql:update-all-dists)'
        if: steps.cache.outputs.cache-hit != 'true'

      # Step 0: gather deps
      - name: apk deps
        run: |
          cd ~/build
          apk add --no-cache expat brotli-dev woff2-dev libwoff2common expat-dev libwebp bzip2-dev tiff libpng lcms2 libjpeg-turbo-dev libtool fontconfig freetype sdl2-dev | tee apks.log
          apk add --no-cache --force-broken-world $(cat ~/build/apks.log | grep Installing | cut -f3 -d' ' | fgrep -v -- '-dev' | sort | uniq | sed 's#$#-dev#g')

      - name: Build SDL 2.0.12
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd ~/build
          wget https://www.libsdl.org/release/SDL2-2.0.12.tar.gz
          tar xzf SDL2-2.0.12.tar.gz
          cd SDL2-2.0.12
          CFLAGS='-O0 -g' ./configure --prefix=/usr --disable-input-tslib --disable-sdl-dlopen --disable-video-vulkan
          make
      - name: Install SDL 2.0.12
        run: |
          apk del --force-broken-world sdl2 sdl2-dev
          cd ~/build/SDL2-2.0.12
          make install

      - name: Build ImageMagick 6.9.12-28
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd ~/build
          wget https://mirror.dogado.de/imagemagick/ImageMagick-6.9.12-28.tar.gz
          tar xzf ImageMagick-6.9.12-28.tar.gz
          cd ImageMagick-6.9.12-28
          ./configure --with-png --enable-static --disable-openmp --prefix=/usr --with-threads  --without-magick-plus-plus --without-x --without-modules
          make -j1
      - name: Install ImageMagick 6.9.12-28
        run: |
          cd ~/build/ImageMagick-6.9.12-28
          make install
          cd /usr/lib
          ln -s libMagickWand-6.Q16.so.7.0.0 libMagickWand.so

      - name: Get LISP deps
        run: |
          cd ~/quicklisp/local-projects/
          (test -d lisp-magick-wand) || git clone --depth=1 https://github.com/azimut/lisp-magick-wand/
          ( cd lisp-magick-wand/ ; git pull )

      - name: Build Binary
        run: |
          export PATH="$HOME/sbcl/bin:${PATH}"
          cd bin/
          make water
          make tar

      - uses: actions/upload-artifact@v2
        with:
          name: water-alpine-x64
          path: |
            water.tar
          if-no-files-found: error

      - name: DEBUG SHELL
        uses: seemethere/action-tmate@skip_dependency_installation
        if: ${{ failure() }}
        with:
          install_dependencies: false
          sudo: false

